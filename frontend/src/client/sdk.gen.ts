// This file is auto-generated by @hey-api/openapi-ts

import {
	type Options as ClientOptions,
	type TDataShape,
	type Client,
	urlSearchParamsBodySerializer,
} from "@hey-api/client-next";
import type {
	LoginLoginAccessTokenData,
	LoginLoginAccessTokenResponse,
	LoginLoginAccessTokenError,
	LoginTestTokenData,
	LoginTestTokenResponse,
	UsersReadUsersData,
	UsersReadUsersError,
	UsersCreateUserData,
	UsersCreateUserResponse,
	UsersCreateUserError,
	UsersDeleteUserMeData,
	UsersDeleteUserMeResponse,
	UsersReadUserMeData,
	UsersReadUserMeResponse,
	UsersUpdateUserMeData,
	UsersUpdateUserMeResponse,
	UsersUpdateUserMeError,
	UsersUpdatePasswordMeData,
	UsersUpdatePasswordMeResponse,
	UsersUpdatePasswordMeError,
	UsersRegisterUserData,
	UsersRegisterUserResponse,
	UsersRegisterUserError,
	UsersDeleteUserData,
	UsersDeleteUserResponse,
	UsersDeleteUserError,
	UsersReadUserByIdData,
	UsersReadUserByIdResponse,
	UsersReadUserByIdError,
	UsersUpdateUserData,
	UsersUpdateUserResponse,
	UsersUpdateUserError,
	PostsReadPostsData,
	PostsReadPostsResponse,
	PostsReadPostsError,
	PostsCreatePostData,
	PostsCreatePostResponse,
	PostsCreatePostError,
	PostsDeletePostData,
	PostsDeletePostResponse,
	PostsDeletePostError,
	PostsUpdatePostData,
	PostsUpdatePostResponse,
	PostsUpdatePostError,
	PrivateCreateUserData,
	PrivateCreateUserResponse,
	PrivateCreateUserError,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
	TData extends TDataShape = TDataShape,
	ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
	/**
	 * You can provide a client instance returned by `createClient()` instead of
	 * individual options. This might be also useful if you want to implement a
	 * custom client.
	 */
	client?: Client;
	/**
	 * You can pass arbitrary values through the `meta` object. This can be
	 * used to access values that aren't defined as part of the SDK function.
	 */
	meta?: Record<string, unknown>;
};

/**
 * Login Access Token
 * OAuth2 compatible token login, get an access token for future requests.
 */
export const loginLoginAccessToken = <ThrowOnError extends boolean = false>(
	options: Options<LoginLoginAccessTokenData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		LoginLoginAccessTokenResponse,
		LoginLoginAccessTokenError,
		ThrowOnError
	>({
		...urlSearchParamsBodySerializer,
		url: "/api/v1/login/access-token",
		...options,
		headers: {
			"Content-Type": "application/x-www-form-urlencoded",
			...options?.headers,
		},
	});
};

/**
 * Test Token
 * Test access token.
 */
export const loginTestToken = <ThrowOnError extends boolean = false>(
	options?: Options<LoginTestTokenData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<
		LoginTestTokenResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/v1/login/test-token",
		...options,
	});
};

/**
 * Read Users
 * Retrieve users.
 */
export const usersReadUsers = <ThrowOnError extends boolean = false>(
	options?: Options<UsersReadUsersData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		unknown,
		UsersReadUsersError,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/v1/users/",
		...options,
	});
};

/**
 * Create User
 * Create a new user.
 */
export const usersCreateUser = <ThrowOnError extends boolean = false>(
	options: Options<UsersCreateUserData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		UsersCreateUserResponse,
		UsersCreateUserError,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/v1/users/",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * Delete User Me
 * Delete own user.
 */
export const usersDeleteUserMe = <ThrowOnError extends boolean = false>(
	options?: Options<UsersDeleteUserMeData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).delete<
		UsersDeleteUserMeResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/v1/users/me",
		...options,
	});
};

/**
 * Read User Me
 * Get current user.
 */
export const usersReadUserMe = <ThrowOnError extends boolean = false>(
	options?: Options<UsersReadUserMeData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		UsersReadUserMeResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/v1/users/me",
		...options,
	});
};

/**
 * Update User Me
 * Update own user.
 */
export const usersUpdateUserMe = <ThrowOnError extends boolean = false>(
	options: Options<UsersUpdateUserMeData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).patch<
		UsersUpdateUserMeResponse,
		UsersUpdateUserMeError,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/v1/users/me",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * Update Password Me
 * Update own password.
 */
export const usersUpdatePasswordMe = <ThrowOnError extends boolean = false>(
	options: Options<UsersUpdatePasswordMeData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).patch<
		UsersUpdatePasswordMeResponse,
		UsersUpdatePasswordMeError,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/v1/users/me/password",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * Register User
 * Create new user without the need to be logged in.
 */
export const usersRegisterUser = <ThrowOnError extends boolean = false>(
	options: Options<UsersRegisterUserData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		UsersRegisterUserResponse,
		UsersRegisterUserError,
		ThrowOnError
	>({
		url: "/api/v1/users/signup",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * Delete User
 * Delete a user.
 */
export const usersDeleteUser = <ThrowOnError extends boolean = false>(
	options: Options<UsersDeleteUserData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).delete<
		UsersDeleteUserResponse,
		UsersDeleteUserError,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/v1/users/{user_id}",
		...options,
	});
};

/**
 * Read User By Id
 * Get a specific user by id.
 */
export const usersReadUserById = <ThrowOnError extends boolean = false>(
	options: Options<UsersReadUserByIdData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		UsersReadUserByIdResponse,
		UsersReadUserByIdError,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/v1/users/{user_id}",
		...options,
	});
};

/**
 * Update User
 * Update a user.
 */
export const usersUpdateUser = <ThrowOnError extends boolean = false>(
	options: Options<UsersUpdateUserData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).patch<
		UsersUpdateUserResponse,
		UsersUpdateUserError,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/v1/users/{user_id}",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * Read Posts
 * Retrieve posts.
 */
export const postsReadPosts = <ThrowOnError extends boolean = false>(
	options?: Options<PostsReadPostsData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		PostsReadPostsResponse,
		PostsReadPostsError,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/v1/posts/",
		...options,
	});
};

/**
 * Create Post
 * Create new post.
 */
export const postsCreatePost = <ThrowOnError extends boolean = false>(
	options: Options<PostsCreatePostData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		PostsCreatePostResponse,
		PostsCreatePostError,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/v1/posts/",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * Delete Post
 * Delete a post.
 */
export const postsDeletePost = <ThrowOnError extends boolean = false>(
	options: Options<PostsDeletePostData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).delete<
		PostsDeletePostResponse,
		PostsDeletePostError,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/v1/posts/{id}",
		...options,
	});
};

/**
 * Update Post
 * Update an post.
 */
export const postsUpdatePost = <ThrowOnError extends boolean = false>(
	options: Options<PostsUpdatePostData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).put<
		PostsUpdatePostResponse,
		PostsUpdatePostError,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/v1/posts/{id}",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * Create User
 * Create a new user.
 */
export const privateCreateUser = <ThrowOnError extends boolean = false>(
	options: Options<PrivateCreateUserData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		PrivateCreateUserResponse,
		PrivateCreateUserError,
		ThrowOnError
	>({
		url: "/api/v1/private/users/",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};
